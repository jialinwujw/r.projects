knitr::opts_chunk$set(echo = TRUE, error = TRUE, message = TRUE, warning = TRUE)
# turn off scientific number
options(scipen = 999)
# load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(survival)
library(survminer)
library(ggfortify) # Hazard ratio table and plot
library(pROC) # ROC curve
# load data
library(smoothHR)
data("whas500")
# Display raw data
head(whas500)
# Check if there are any missing data
apply(whas500, 2, function(x){sum(is.na(x))})
# Get the statistical summary and nature of the dataset
summary(whas500)
df <- whas500 %>%
select(-c(year, disdate, dstat, lenfol)) %>%
mutate(age_group = cut(age,
breaks=c(30,40,50,60,70,80,90,Inf),
labels=c("30-39","40-49","50-59","60-69","70-79","80-89","90+"),
include.lowest = TRUE,
include.highest = FALSE),
gender = factor(gender, levels = c(0, 1), labels = c("Male", "Female")),
hr_group = cut(hr,
breaks=c(30,60,90,120,150,Inf),
labels=c("30-59","60-89","90-119","120-149","150+"),
include.lowest = TRUE,
include.highest = FALSE),
sysbp_group = cut(sysbp,
breaks=c(50,100,150,200,Inf),
labels=c("50-99","100-149","150-199","200+"),
include.lowest = TRUE,
include.highest = FALSE),
diasbp_group = cut(diasbp,
breaks=c(0,50,70,90,110,Inf),
labels=c("0-49","50-69","70-89","90-109","110+"),
include.lowest = TRUE,
include.highest = FALSE),
bmi_group = cut(bmi,
breaks=c(10,20,30,40,Inf),
labels=c("10-19","20-29","30-39","40+"),
include.lowest = TRUE,
include.highest = FALSE),
miord = factor(miord, levels = c(0, 1), labels = c("First", "Recurrent")),
mitype = factor(mitype, levels = c(0, 1), labels = c("Non Q-wave", "Q-wave")),
cvd = factor(cvd, levels = c(0, 1), labels = c("No", "Yes")),
afb = factor(afb, levels = c(0, 1), labels = c("No", "Yes")),
chf = factor(chf, levels = c(0, 1), labels = c("No", "Yes")),
av3 = factor(av3, levels = c(0, 1), labels = c("No", "Yes")),
admitdate = as.Date(admitdate, format = "%d-%m-%Y"), # change the date format
fdate = as.Date(fdate, format = "%d-%m-%Y"), # change the date format
survival_time = as.numeric(difftime(fdate, admitdate, units = "days")) / 30.42, # new variable for survival time (month)
censor = ifelse(((fdate - admitdate) < 365.25) & fstat == 1, 1, 0),
status = factor(fstat, levels = c(0, 1), labels = c("Alive", "Dead"))) # identify status using new censor data
head(df)
# Get the statistical summary and nature of the dataset
summary(df)
# Calculate mean age for each status group
age_mean <- aggregate(age ~ status, data = df, mean)
# Plot age distribution with mean age lines and labels
ggplot(df, aes(x = age, fill = status, color = status)) +
geom_density(alpha = 0.5) +
ggtitle("Age Distribution by Vital Status") +
geom_vline(data = age_mean, aes(xintercept = age, color = status),
linetype = "dashed", linewidth = 1.5) +
geom_text(data = age_mean, aes(x = age, y = 0.04, label = round(age, 1), color = status),
vjust = 1.5, size = 4) +
labs(y = "density")
km_age <- survfit(Surv(survival_time, fstat) ~ age_group, data = df) # survival function
ggsurvplot(km_age,
data = df,
censor = FALSE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Age Group") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
# Calculate counts by gender and status
gender_count <- table(df$gender, df$status)
# Convert table to dataframe
gender_df <- as.data.frame(gender_count)
# Rename columns
colnames(gender_df) <- c("gender", "status", "count")
# Stacked + percent
ggplot(gender_df, aes(fill=status, y=count, x=gender)) +
geom_bar(position="fill", stat="identity", alpha = 0.8) +
geom_text(aes(label=count), position=position_fill(vjust=0.5)) +
ggtitle("Distribution of Vital Status by Gender") +
xlab("Gender") +
ylab("Proportion")
km_gender <- survfit(Surv(survival_time, fstat) ~ gender, data = df) # survival function
ggsurvplot(km_gender,
data = df,
censor = FALSE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Gender") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
# Calculate mean heart rate for each vital status group
hr_mean <- aggregate(hr ~ status, data = df, mean)
# Create box plot with mean heart rate
ggplot(df, aes(x = status, y = hr, fill = status)) +
geom_boxplot(alpha = 0.8) +
geom_text(data = hr_mean, aes(x = status, y = hr, label = round(hr, 1)), size = 4, vjust = -1) +
ggtitle("Heart Rate by Vital Status") +
xlab("Vital Status") +
ylab("Heart Rate")
km_hr <- survfit(Surv(survival_time, fstat) ~ hr_group, data = df) # survival function
ggsurvplot(km_hr,
data = df,
censor = FALSE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Heart Rate") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
# Systolic Blood Pressure
ggplot(df, aes(x = status, y = sysbp, fill = status)) +
geom_boxplot(alpha = 0.8) +
ggtitle("Initial Systolic Blood Pressure by Vital Status") +
xlab("Vital Status") +
ylab("Initial Systolic Blood Pressure (mmHg)")
# Diastolic Blood Pressure
ggplot(df, aes(x = status, y = diasbp, fill = status)) +
geom_boxplot(alpha = 0.8) +
ggtitle("Initial Diastolic Blood Pressure by Vital Status") +
xlab("Vital Status") +
ylab("Initial Diastolic Blood Pressure (mmHg)")
# Systolic Blood Pressure
km_sysbp <- survfit(Surv(survival_time, fstat) ~ sysbp_group, data = df) # survival function
ggsurvplot(km_sysbp,
data = df,
censor = FALSE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Systolic Blood Pressure") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
# Diastolic Blood Pressure
km_diasbp <- survfit(Surv(survival_time, fstat) ~ diasbp_group, data = df) # survival function
ggsurvplot(km_diasbp,
data = df,
censor = FALSE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Diastolic Blood Pressure") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
# Calculate mean bmi for each status group
bmi_mean <- aggregate(bmi ~ status, data = df, mean)
# Plot bmi distribution with mean age lines and labels
ggplot(df, aes(x = bmi, fill = status, color = status)) +
geom_density(alpha = 0.5) +
ggtitle("BMI Distribution by Vital Status") +
geom_vline(data = bmi_mean, aes(xintercept = bmi, color = status),
linetype = "dashed", linewidth = 1.5) +
geom_text(data = bmi_mean, aes(x = bmi, y = 0.08, label = round(bmi, 1), color = status),
vjust = -3, size = 4) +
labs(y = "density")
km_bmi <- survfit(Surv(survival_time, fstat) ~ bmi_group, data = df) # survival function
ggsurvplot(km_bmi,
data = df,
censor = FALSE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by BMI") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
km_cvd <- survfit(Surv(survival_time, fstat) ~ cvd, data = df) # survival function
ggsurvplot(km_cvd,
data = df,
surv.median.line = "hv",
censor = TRUE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by History of Cardiovascular Disease (CVD)") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
km_afb <- survfit(Surv(survival_time, fstat) ~ afb, data = df) # survival function
ggsurvplot(km_afb,
data = df,
surv.median.line = "hv",
censor = TRUE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Atrial Fibrillation (AFB)") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
km_sho <- survfit(Surv(survival_time, fstat) ~ sho, data = df) # survival function
ggsurvplot(km_sho,
data = df,
surv.median.line = "hv",
censor = TRUE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Cardiogenic Shock (SHO)") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
km_chf <- survfit(Surv(survival_time, fstat) ~ chf, data = df) # survival function
ggsurvplot(km_chf,
data = df,
surv.median.line = "hv",
censor = TRUE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Congestive Heart Complications (CHF)") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
km_av3 <- survfit(Surv(survival_time, fstat) ~ av3, data = df) # survival function
ggsurvplot(km_av3,
data = df,
surv.median.line = "hv",
censor = TRUE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by Complete Heart Block (AV3)") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
km_miord <- survfit(Surv(survival_time, fstat) ~ miord, data = df) # survival function
ggsurvplot(km_miord,
data = df,
surv.median.line = "hv",
conf.int = TRUE,
censor = TRUE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by MI Order") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
km_mitype <- survfit(Surv(survival_time, fstat) ~ mitype, data = df) # survival function
ggsurvplot(km_mitype,
data = df,
surv.median.line = "hv",
conf.int = TRUE,
censor = TRUE,
size = 0.5,
legend = "right",
legend.title = "",
title = "Survival Curve by MI Type") +
labs(x = "Time (Month)", y = "Survival Probability") # plot KM curve
# Create new dataframe for Cox Regression
df_time <- whas500 %>%
select(-c(year, disdate, dstat, lenfol, id)) %>%
mutate(admitdate = as.Date(admitdate, format = "%d-%m-%Y"), # change the date format
fdate = as.Date(fdate, format = "%d-%m-%Y"), # change the date format
survival_time = as.numeric(difftime(fdate, admitdate, units = "days")) / 30.42) %>%  # new variable for survival time (month))
select(-c(admitdate, fdate))
head(df_time)
# Split the data into a training set and a validation set
set.seed(42)
train <- sample(nrow(df_time), nrow(df_time)*0.7)
train_data <- df_time[train,]
test_data <- df_time[-train,]
# Fit Cox model with all variables
cox_fit <- coxph(Surv(survival_time, fstat) ~ age + gender + hr + sysbp + diasbp + bmi + cvd + afb + sho + chf + av3 + miord + mitype + los, data = train_data)
summary(cox_fit)
# AIC
aic_all_predictors <- AIC(cox_fit)
aic_all_predictors
# Create an empty model with only the survival object formula
cox_0 <- coxph(Surv(survival_time, fstat) ~ 1, data = train_data)
# Define the full model formula
cox_full <- as.formula("Surv(survival_time, fstat) ~ age + gender + hr + sysbp + diasbp + bmi + cvd + afb + sho + chf + av3 + miord + mitype + los")
# Perform forward selection using step() function
cox_forward <- step(cox_0, direction = "forward", scope = cox_full, method = "loglik")
# Interpret the final model
summary(cox_forward)
# Plot the hazard ratios and confidence intervals
ggforest(cox_forward, data = train_data)
df_censor <- whas500 %>%
select(-c(year, disdate, dstat, lenfol, id)) %>%
mutate(admitdate = as.Date(admitdate, format = "%d-%m-%Y"), # change the date format
fdate = as.Date(fdate, format = "%d-%m-%Y"), # change the date format
censor = ifelse(((fdate - admitdate) < 365.25) & fstat == 1, 1, 0),) %>%
select(-c(admitdate, fdate, fstat))
head(df_censor)
# Split the data into training and testing sets
set.seed(42)
train <- sample(nrow(df_censor), nrow(df_censor)*0.7)
train_data <- df_censor[train, ]
test_data <- df_censor[-train, ]
# Convert the censor variable to a factor variable
train_data$censor <- factor(train_data$censor)
test_data$censor <- factor(test_data$censor)
# Fit a logistic regression model
glm_full <- glm(censor ~ ., data = train_data, family = "binomial")
summary(glm_full)
# Calculate the predicted probabilities
glm_probs <- predict(glm_full, type = "response")
# Calculate the AUC
glm_auc <- roc(train_data$censor, glm_probs)$auc
# Display the AUC
glm_auc
# Intercept only
glm_0 <- glm(censor ~ 1, data = train_data, family = "binomial")
# Forward Selection
glm_forward <- step(glm_0,
scope = list(lower=formula(glm_0),
upper=formula(glm_full)),
direction = "forward")
summary(glm_forward)
# Calculate the predicted probabilities
glm_forward_probs <- predict(glm_forward, type = "response")
# Calculate the ROC curve
glm_forward_roc <- roc(train_data$censor, glm_forward_probs)
# Calculate AUC
glm_forward_auc <- glm_forward_roc$auc
# Plot the ROC curve with AUC
plot(glm_forward_roc, main = "ROC Curve for Final Logistic Regression")
text(0.7, 0.3, paste("AUC =", round(glm_forward_auc, 4)), cex = 1.5)
abline(a = 0, b = 1, lty = 2)
# Extract the coefficients and their standard errors
coef_df <- data.frame(coef = coef(glm_forward), se = summary(glm_forward)$coefficients[, 2])
# Modify the coef_df dataframe
coef_df <- coef_df %>%
mutate(feature = rownames(coef_df),
abs_coef = abs(coef)) %>%
filter(feature != "(Intercept)") %>%
arrange(abs_coef)
coef_df <- coef_df %>%
mutate(feature_name = case_when(
feature == "age" ~ "Age at hospital admission (years)",
feature == "gender" ~ "Gender (0: Male / 1: Female)",
feature == "hr" ~ "Initial heart rate (beats per minute)",
feature == "sysbp" ~ "Initial systolic blood pressure (mmHg)",
feature == "diasbp" ~ "Initial diastolic blood pressure (mmHg)",
feature == "bmi" ~ "Body Mass Index (kg/m2)",
feature == "cvd" ~ "History of cardiovascular disease (0: No / 1: Yes)",
feature == "afb" ~ "Atrial fibrillation (0: No / 1: Yes)",
feature == "sho" ~ "Cardiogenic shock (0: No / 1: Yes)",
feature == "chf" ~ "Congestive heart complications (0: No / 1: Yes)",
feature == "av3" ~ "Complete heart block (0: No / 1: Yes)",
feature == "miord" ~ "MI order (0: First / 1: Recurrent)",
feature == "mitype" ~ "MI type (0: Non-Q-wave / 1: Q-wave)",
feature == "los" ~ "Length of hospital stay",
TRUE ~ feature
))
rownames(coef_df) <- NULL
coef_df$feature_name <- factor(coef_df$feature_name, levels = coef_df$feature_name)
# Create the bar chart to show feature importance
ggplot(coef_df, aes(feature_name, abs_coef)) +
geom_col() +
coord_flip()+
labs(title = "Feature Importance of Logistic Regression Model",
x = "Absolute Coefficient Estimate",
y = "Predictor Variable")
